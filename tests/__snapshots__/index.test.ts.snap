// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin-typescript-to-proptypes comments copies leading comments 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  /** This does something I swear. */
  thing: number; // What about inline comments?

  other: string;
}
export default class Comments extends React.Component<Props> {
  static propTypes = {
    /** This does something I swear. */
    thing: _pt.number.isRequired,

    /* What about inline comments?*/
    other: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes customPropTypeSuffixes supports custom prop type suffixes 1`] = `
"import _pt from 'prop-types';
import React from 'react';
import { NameShape, AgePropType, HeightUnsupported } from './shapes';
export interface Props {
  name: NameShape;
  nameOpt?: NameShape;
  age: AgePropType;
  ageOpt?: AgePropType;
  both: NameShape | AgePropType | boolean;
  height: HeightUnsupported;
}
export default class CustomSuffix extends React.Component<Props> {
  static propTypes = {
    name: NameShape.isRequired,
    nameOpt: NameShape,
    age: AgePropType.isRequired,
    ageOpt: AgePropType,
    both: _pt.oneOfType([NameShape, AgePropType, _pt.bool]).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes forbidExtraProps supports forbid extra props 1`] = `
"import { forbidExtraProps as _forbidExtraProps } from 'airbnb-prop-types';
import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default class ForbidExtraProps extends React.Component<Props> {
  static propTypes = _forbidExtraProps({
    name: _pt.string.isRequired
  });

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes forbidExtraProps supports merging with forbid extra props 1`] = `
"import _pt from 'prop-types';
import React from 'react';
import { forbidExtraProps, integer as int } from 'airbnb-prop-types';
interface Props {
  name: string;
  age: number;
}
export default class MergeForbidExtraProps extends React.Component<Props> {
  static propTypes = forbidExtraProps({
    name: _pt.string.isRequired,
    age: int()
  });

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes handles keyof operator 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: keyof JSX.IntrinsicAttributes;
}
export default class KeyOf extends React.Component<Props> {
  static propTypes = {
    name: _pt.any.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes handles self referencing types 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Shape {
  nested: Shape;
}
interface Props {
  shape: Shape;
}
export default class RecursiveType extends React.Component<Props> {
  static propTypes = {
    shape: _pt.shape({
      nested: _pt.shape({
        nested: _pt.shape({
          nested: _pt.object.isRequired
        }).isRequired
      }).isRequired
    }).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes handles type index access operator 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Base {
  union: 1 | 2 | 3 | 4 | 5;
}
interface Props {
  name: Base['unknown'];
  list: Base['union'];
}
export default class IndexAccess extends React.Component<Props> {
  static propTypes = {
    list: _pt.oneOf([1, 2, 3, 4, 5]).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes handles typeof operator 1`] = `
"import _pt from 'prop-types';
import React from 'react';
const list = [1, 2, 3];
interface Props {
  name: typeof list;
}
export default class KeyOf extends React.Component<Props> {
  static propTypes = {
    name: _pt.any.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes implicitChildren includes a children prop type 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface PropsA {
  name: string;
}
export class ImplicitNoChildren extends React.Component<PropsA> {
  static propTypes = {
    name: _pt.string.isRequired,
    children: _pt.node
  };

  render() {
    return null;
  }

}
export interface PropsB {
  children: string;
  name: string;
}
export class ImplicitWithChildren extends React.Component<PropsB> {
  static propTypes = {
    children: _pt.string.isRequired,
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}
export interface PropsC {}
export class ImplicitChildrenNoProps extends React.Component<PropsC> {
  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes maxDepth stops converting once max depth is met 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Root {
  one: {
    two: {
      three: {
        four: {
          five: {
            key: 'value';
          };
        };
      };
    };
  };
}
interface Props {
  root: Root;
}
export default class MaxDepth extends React.Component<Props> {
  static propTypes = {
    root: _pt.shape({
      one: _pt.shape({
        two: _pt.shape({
          three: _pt.object.isRequired
        }).isRequired
      }).isRequired
    }).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes maxSize stops at max size for shapes and literal arrays 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  shape: {
    foo: string;
    bar: number;
    baz: boolean;
    qux: null;
  };
  union: 'foo' | 'bar' | 'baz' | 'qux';
}
export default class MaxSize extends React.Component<Props> {
  static propTypes = {
    shape: _pt.shape({
      foo: _pt.string.isRequired,
      bar: _pt.number.isRequired
    }).isRequired,
    union: _pt.oneOf(['foo', 'bar']).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes strict adds \`isRequired\` when strict 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name?: string;
  title: string;
}
export default class Strict extends React.Component<Props> {
  static propTypes = {
    name: _pt.string,
    title: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes strict omits \`isRequired\` when not strict 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name?: string;
  title: string;
}
export default class Strict extends React.Component<Props> {
  static propTypes = {
    name: _pt.string,
    title: _pt.string
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/avoids-state.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  name: string;
}
export interface State {
  age: number;
}
export default class AvoidsState extends React.Component<Props, State> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
export default class ClassCustomReactImportName extends R.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/custom-react-import-name-pure.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
export default class ClassCustomReactImportNamePure extends R.PureComponent<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default class ClassDefaultProps extends React.Component<Props> {
  static propTypes = {
    name: _pt.string
  };
  static defaultProps = {
    name: 'Foo'
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}
export interface Props extends AProps, BProps {
  name: string;
}
export default class ClassExtendedInterfaces extends React.Component<Props> {
  static propTypes = {
    a: _pt.number.isRequired,
    b: _pt.bool.isRequired,
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export type BProps = {
  b: boolean;
};
export type Props = AProps & BProps & {
  name: string;
};
export default class ClassExtendedTypeAliases extends React.Component<Props> {
  static propTypes = {
    a: _pt.number.isRequired,
    b: _pt.bool.isRequired,
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
export default class ClassMergeWithExistingPropTypes extends React.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired,
    custom: PropTypes.number.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const CustomShape = PropTypes.string;
export default class ClassMergeWithNoOverride extends React.Component<Props> {
  static propTypes = {
    name: CustomShape.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/missing-type.ts 1`] = `
"import React from 'react';
export default class ClassMissingType extends React.Component<Props> {
  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/multiple-generics.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}
export default class ClassMultipleGenerics extends React.Component<AProps & BProps> {
  static propTypes = {
    a: _pt.number.isRequired,
    b: _pt.bool.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/named-react-imports.ts 1`] = `
"import _pt from 'prop-types';
import React, { Component } from 'react';
interface Props {
  name: string;
}
export default class ClassNamedReactImports extends Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/named-react-imports-pure.ts 1`] = `
"import _pt from 'prop-types';
import React, { PureComponent } from 'react';
interface Props {
  name: string;
}
export default class ClassNamedReactImportsPure extends PureComponent<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/no-generics.ts 1`] = `
"import React from 'react';
export default class ClassNoGenerics extends React.Component {
  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}
export default class ClassNoTypeProperties extends React.Component<Props> {
  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/class/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default class ClassStandard extends React.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/conditional-unions.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface BasicProps {
  foo: boolean;
}
interface ConditionA extends BasicProps {
  A: string;
  B?: string;
}
interface ConditionB extends BasicProps {
  A?: string;
  B: string;
}
export interface Props {
  name: ConditionA | ConditionB;
}
export default class ConditionalUnions extends React.Component<Props> {
  static propTypes = {
    name: _pt.oneOfType([_pt.shape({
      A: _pt.string.isRequired,
      B: _pt.string
    }), _pt.shape({
      A: _pt.string,
      B: _pt.string.isRequired
    })]).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/custom-prop-types-import-name.ts 1`] = `
"import React from 'react';
import PT from 'prop-types';
export interface Props {
  name: string;
}
export default class CustomPropTypesImportName extends React.Component<Props> {
  static propTypes = {
    name: PT.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/custom-prop-types-import-namespace.ts 1`] = `
"import * as React from 'react';
import * as PT from 'prop-types';
export interface Props {
  name: string;
}
export default class CustomPropTypesImportNamespace extends React.Component<Props> {
  static propTypes = {
    name: PT.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/custom-prop-types-named-no-default.ts 1`] = `
"import React from 'react';
import PropTypes, { ValidationMap } from 'prop-types';
export interface Props {
  name: string;
}
export default class CustomPropTypesNamedNoDefault extends React.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
export interface Props {
  name: string;
}
export default class CustomReactImportName extends R.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/custom-react-import-namespace.ts 1`] = `
"import _pt from 'prop-types';
import * as R from 'react';
export interface Props {
  name: string;
}
export default class CustomReactImportNamespace extends R.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
export default function FuncCustomReactImportName(props: Props) {
  return null;
}
FuncCustomReactImportName.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default function FuncDefaultProps(props: Props) {
  return null;
}
FuncDefaultProps.propTypes = {
  name: _pt.string
};
FuncDefaultProps.defaultProps = {
  name: 'Foo'
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/export-default.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default function FuncExportDefault(props: Props) {
  return null;
}
FuncExportDefault.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/export-named.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export function FuncExportNamed(props: Props) {
  return null;
}
FuncExportNamed.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}
export interface Props extends AProps, BProps {
  name: string;
}
export default function FuncExtendedInterfaces(props: Props) {
  return null;
}
FuncExtendedInterfaces.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export type BProps = {
  b: boolean;
};
export type Props = AProps & BProps & {
  name: string;
};
export default function FuncExtendedTypeAliases(props: Props) {
  return null;
}
FuncExtendedTypeAliases.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
export default function FuncMergeWithExistingPropTypes(props: Props) {
  return null;
}
FuncMergeWithExistingPropTypes.propTypes = {
  name: PropTypes.string.isRequired,
  custom: PropTypes.number.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const CustomShape = PropTypes.string;
export default function FuncMergeWithNoOverride(props: Props) {
  return null;
}
FuncMergeWithNoOverride.propTypes = {
  name: CustomShape.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/missing-type.ts 1`] = `
"import React from 'react';
export default function FuncMissingType(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/multiple-annotations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}
export default function FuncMultipleAnnotations(props: AProps & BProps) {
  return null;
}
FuncMultipleAnnotations.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/no-annotations.ts 1`] = `
"import React from 'react';
export default function FuncNoAnnotations(props) {
  return null;
}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/no-export.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

function FuncNoExport(props: Props) {
  return null;
}

FuncNoExport.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/no-react-import.ts 1`] = `
"interface Props {}
export default function FuncNoReactImport(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}
export default function FuncNoTypeProperties(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/function/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default function FuncStandard(props: Props) {
  return null;
}
FuncStandard.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/hoc-component.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export function withClass() {
  return Component => {
    class HOCComponent extends React.Component<Props> {
      static propTypes = {
        name: _pt.string.isRequired
      };

      render() {
        return null;
      }

    }

    return HOCComponent;
  };
}
export function withFunction() {
  return Component => {
    function HOCFunc(props: Props) {
      return null;
    }

    HOCFunc.propTypes = {
      name: _pt.string.isRequired
    };
    return HOCFunc;
  };
}
export function withVar() {
  return Component => {
    const HOCVar: React.SFC<Props> = () => null;

    HOCVar.propTypes = {
      name: _pt.string.isRequired
    };
    return HOCVar;
  };
}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/hoc-component-returns.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export function withClass() {
  return Component => class HOCComponent extends React.Component<Props> {
    static propTypes = {
      name: _pt.string.isRequired
    };

    render() {
      return null;
    }

  };
}
export function withFunction() {
  return Component => function HOCFunc(props: Props) {
    return null;
  };
}
export function withVar() {
  return Component => {
    const HOCVar: React.FC<Props> = () => null;

    HOCVar.propTypes = {
      name: _pt.string.isRequired
    };
    return HOCVar;
  };
}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/memo-ref-components.tsx 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface RefProps {
  foo?: string;
  ref: React.Ref<HTMLButtonElement>;
}

function BaseRefComp(props: RefProps) {
  return null;
}

BaseRefComp.propTypes = {
  foo: _pt.string,
  ref: _pt.oneOfType([_pt.string, _pt.func, _pt.object]).isRequired
};
const RefComp = React.forwardRef<HTMLButtonElement, RefProps>((props, ref) => <BaseRefComp ref={ref} {...props} />);
RefComp.propTypes = {
  foo: _pt.string,
  ref: _pt.oneOfType([_pt.string, _pt.func, _pt.object]).isRequired
};
const RefCompAlt = React.forwardRef((props: RefProps, ref: React.Ref<HTMLButtonElement>) => <BaseRefComp ref={ref} {...props} />);
RefCompAlt.propTypes = {
  foo: _pt.string,
  ref: _pt.oneOfType([_pt.string, _pt.func, _pt.object]).isRequired
};
const RefCompNoTypes = React.forwardRef((props, ref) => null);
interface MemoProps {
  bar: number;
}
const MemoComp = React.memo<MemoProps>(props => {
  return null;
});
MemoComp.propTypes = {
  bar: _pt.number.isRequired
};
const MemoCompAlt = React.memo((props: MemoProps) => {
  return null;
});
MemoCompAlt.propTypes = {
  bar: _pt.number.isRequired
};
const MemoCompNoTypes = React.memo(props => {
  return null;
});"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/multiple-components.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface AProps {
  foo: string;
}

class MultipleComponentsClass extends React.Component<AProps> {
  static propTypes = {
    foo: _pt.string.isRequired
  };

  render() {
    return null;
  }

}

interface BProps {
  bar: number;
}

function MultipleComponentsFunc(props: BProps) {
  return null;
}

MultipleComponentsFunc.propTypes = {
  bar: _pt.number.isRequired
};
interface CProps {
  bar: number;
}

const MultipleComponentsVar: React.SFC<CProps> = () => null;

MultipleComponentsVar.propTypes = {
  bar: _pt.number.isRequired
};

const MultipleComponentsVarFC: React.FunctionComponent<CProps> = () => null;

MultipleComponentsVarFC.propTypes = {
  bar: _pt.number.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/nested-components.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface AProps {
  foo: string;
}
interface BProps {
  bar: number;
}

class NestedComponentsClass extends React.Component<AProps> {
  static propTypes = {
    foo: _pt.string.isRequired
  };

  render() {
    function NestedComponentsFunc(props: BProps) {
      return null;
    }

    NestedComponentsFunc.propTypes = {
      bar: _pt.number.isRequired
    };
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/no-prop-types-import.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  name: string;
}
export default class NoPropTypesImport extends React.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/no-remove-existing-prop-types-import.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
export default class NoRemoveExistingPropTypesImport extends React.Component {
  static propTypes = {
    name: PropTypes.string
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/non-react-file.ts 1`] = `"export default function noop() {}"`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/prop-types-import.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
export interface Props {
  name: string;
}
export default class PropTypesImport extends React.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/react-import-namespace.ts 1`] = `
"import _pt from 'prop-types';
import * as React from 'react';
export interface Props {
  name: string;
}
export default class ReactImportNamespace extends React.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-array.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  any: any[];
  null: null[];
  numbers?: Array<number>;
  strings: string[];
  booleans: boolean[];
  objects?: Array<object>;
  union: (string | number)[];
  intersection: (string & number)[];
  nested?: string[][];
}
export default class TypeArray extends React.Component<Props> {
  static propTypes = {
    any: _pt.arrayOf(_pt.any).isRequired,
    null: _pt.arrayOf(_pt.oneOf([null])).isRequired,
    numbers: _pt.arrayOf(_pt.number),
    strings: _pt.arrayOf(_pt.string).isRequired,
    booleans: _pt.arrayOf(_pt.bool).isRequired,
    objects: _pt.arrayOf(_pt.object),
    union: _pt.arrayOf(_pt.oneOfType([_pt.string, _pt.number])).isRequired,
    intersection: _pt.arrayOf(_pt.oneOfType([_pt.string, _pt.number])).isRequired,
    nested: _pt.arrayOf(_pt.arrayOf(_pt.string))
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-builtins.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  error: Error;
  errorOpt?: Error;
  date: Date;
  dateOpt?: Date;
  regexp: RegExp;
  regexpOpt?: RegExp;
  map: Map<string, number>;
  mapOpt?: WeakMap<object, number>;
  set: Set<number>;
  setOpt?: WeakSet<object>;
  promise: Promise<any>;
  promiseOpt?: Promise<any>;
  union: Error | Date | RegExp | null;
}
export default class TypeBuiltins extends React.Component<Props> {
  static propTypes = {
    error: _pt.instanceOf(Error).isRequired,
    errorOpt: _pt.instanceOf(Error),
    date: _pt.instanceOf(Date).isRequired,
    dateOpt: _pt.instanceOf(Date),
    regexp: _pt.instanceOf(RegExp).isRequired,
    regexpOpt: _pt.instanceOf(RegExp),
    map: _pt.instanceOf(Map).isRequired,
    mapOpt: _pt.instanceOf(WeakMap),
    set: _pt.instanceOf(Set).isRequired,
    setOpt: _pt.instanceOf(WeakSet),
    promise: _pt.instanceOf(Promise).isRequired,
    promiseOpt: _pt.instanceOf(Promise),
    union: _pt.oneOfType([_pt.instanceOf(Error), _pt.instanceOf(Date), _pt.instanceOf(RegExp), _pt.oneOf([null])])
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-complex.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  a: number;
  b?: string | boolean;
  c: 1 | 'foo' | false;
  d?: {
    name?: string;
  }[];
  e: {
    e1: string[][];
    e2: () => void;
    e3?: {
      e1a: object;
    } | null;
  };
  f?: any;
  g: ((e: Event) => null) | (() => {});
  h?: {
    [key: string]: number;
  } & {
    [key: string]: string[];
  };
}
export default class TypeComplex extends React.Component<Props> {
  static propTypes = {
    a: _pt.number.isRequired,
    b: _pt.oneOfType([_pt.string, _pt.bool]),
    c: _pt.oneOf([1, 'foo', false]).isRequired,
    d: _pt.arrayOf(_pt.shape({
      name: _pt.string
    })),
    e: _pt.shape({
      e1: _pt.arrayOf(_pt.arrayOf(_pt.string)).isRequired,
      e2: _pt.func.isRequired,
      e3: _pt.oneOfType([_pt.shape({
        e1a: _pt.object.isRequired
      }), _pt.oneOf([null])])
    }).isRequired,
    f: _pt.any,
    g: _pt.oneOfType([_pt.func, _pt.func]).isRequired,
    h: _pt.oneOfType([_pt.objectOf(_pt.number), _pt.objectOf(_pt.arrayOf(_pt.string))])
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-enum.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
enum Standard {
  FOO,
  BAR,
  BAZ,
}
enum FirstInitializer {
  FOO = 10,
  BAR,
  BAZ,
}
enum AllNumbers {
  FOO = 10,
  BAR = 20,
  BAZ = 30,
}
enum AllStrings {
  FOO = 'Foo',
  BAR = 'Bar',
  BAZ = 'Baz',
}
enum MixedTypes {
  FOO = 1,
  BAR = 'Bar',
  BAZ = 2,
}
const enum ConstEnum {
  Up,
  Down,
  Left,
  Right,
}
export interface Props {
  standard: Standard;
  first?: FirstInitializer;
  numbers?: AllNumbers;
  strings: AllStrings;
  mixed?: MixedTypes;
  constant?: ConstEnum;
}
export default class TypeEnum extends React.Component<Props> {
  static propTypes = {
    standard: _pt.oneOf([0, 1, 2]).isRequired,
    first: _pt.oneOf([10, 11, 12]),
    numbers: _pt.oneOf([10, 20, 30]),
    strings: _pt.oneOf(['Foo', 'Bar', 'Baz']).isRequired,
    mixed: _pt.oneOf([1, 'Bar', 2]),
    constant: _pt.oneOf([0, 1, 2, 3])
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-function.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  void: () => void;
  objReturn: () => {};
  typeReturn?: () => string;
  args: (a: number, b: boolean) => null;
  parens?: () => void;
  handler: React.ChangeEventHandler;
}
export default class TypeFunction extends React.Component<Props> {
  static propTypes = {
    void: _pt.func.isRequired,
    objReturn: _pt.func.isRequired,
    typeReturn: _pt.func,
    args: _pt.func.isRequired,
    parens: _pt.func,
    handler: _pt.func.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-null-undef.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  nullable: string | null;
  undefined: string | undefined;
  optional?: string;
  optionalUndefined?: string | undefined;
  optionalNullable?: string | null;
  optionalBoth?: string | null | undefined;
  literalNullable: 'foo' | null;
  literalUndefined: 'foo' | undefined;
  literalOptional?: 'foo';
  literalOptionalUndefined?: 'foo' | undefined;
  literalOptionalNullable?: 'foo' | null;
  literalOptionalBoth?: 'foo' | null | undefined;
}
export default class NullUndefined extends React.Component<Props> {
  static propTypes = {
    nullable: _pt.oneOfType([_pt.string, _pt.oneOf([null])]),
    optional: _pt.string,
    optionalNullable: _pt.oneOfType([_pt.string, _pt.oneOf([null])]),
    literalNullable: _pt.oneOfType([_pt.oneOf(['foo']), _pt.oneOf([null])]),
    literalOptional: _pt.oneOf(['foo']),
    literalOptionalNullable: _pt.oneOfType([_pt.oneOf(['foo']), _pt.oneOf([null])])
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-object.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
type Things = 'foo' | 'bar' | 'baz';
export interface Props {
  object: object;
  empty: {};
  index?: {
    [key: string]: number;
  };
  shape: {
    id: number;
    name?: string;
    status: 'active' | 'pending';
  };
  mapped?: { [K in Things]: string | number };
}
export default class TypeObject extends React.Component<Props> {
  static propTypes = {
    object: _pt.object.isRequired,
    empty: _pt.object.isRequired,
    index: _pt.objectOf(_pt.number),
    shape: _pt.shape({
      id: _pt.number.isRequired,
      name: _pt.string,
      status: _pt.oneOf(['active', 'pending']).isRequired
    }).isRequired,
    mapped: _pt.objectOf(_pt.oneOfType([_pt.string, _pt.number]))
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-primitives.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  any: any;
  unknowns: unknown;
  voids: void;
  number: number;
  string: string;
  boolean: boolean;
  symbol: symbol;
  anyOpt?: any;
  numberOpt?: number;
  stringOpt?: string;
  booleanOpt?: boolean;
  symbolOpt?: symbol;
  literalNumber: 123;
  literalString?: 'abc';
  literalBool: true;
}
export default class TypePrimitives extends React.Component<Props> {
  static propTypes = {
    any: _pt.any.isRequired,
    unknowns: _pt.any.isRequired,
    voids: _pt.any.isRequired,
    number: _pt.number.isRequired,
    string: _pt.string.isRequired,
    boolean: _pt.bool.isRequired,
    symbol: _pt.symbol.isRequired,
    anyOpt: _pt.any,
    numberOpt: _pt.number,
    stringOpt: _pt.string,
    booleanOpt: _pt.bool,
    symbolOpt: _pt.symbol,
    literalNumber: _pt.oneOf([123]).isRequired,
    literalString: _pt.oneOf(['abc']),
    literalBool: _pt.oneOf([true]).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-react.ts 1`] = `
"import _pt from 'prop-types';
import React, { ReactText, ReactNode, ReactType, ComponentType, ComponentClass, StatelessComponent, MouseEvent, ReactElement, SFCElement, FunctionComponentElement } from 'react';
export interface Props {
  text: React.ReactText;
  textAlias?: ReactText;
  node: React.ReactNode;
  nodeAlias?: ReactNode;
  type: React.ReactType;
  typeAlias?: ReactType;
  comp: React.ComponentType;
  compGeneric?: React.ComponentType<any>;
  compAlias: ComponentType;
  cls: React.ComponentClass;
  clsGeneric?: React.ComponentClass<any>;
  clsAlias: ComponentClass;
  sfc: React.StatelessComponent;
  sfcGeneric?: React.StatelessComponent<any>;
  sfcAlias: StatelessComponent;
  el: React.ReactElement<any>;
  elAlias?: ReactElement<any>;
  sfcEl: React.SFCElement<any>;
  sfcElAlias?: SFCElement<any>;
  fcEl: React.FunctionComponentElement<any>;
  fcElAlias?: FunctionComponentElement<any>;
  jsx: JSX.Element;
  event: React.MouseEvent;
  eventAlias?: MouseEvent;
  ref: React.Ref<any>;
}
export default class TypeReact extends React.Component<Props> {
  static propTypes = {
    text: _pt.node.isRequired,
    textAlias: _pt.node,
    node: _pt.node.isRequired,
    nodeAlias: _pt.node,
    type: _pt.node.isRequired,
    typeAlias: _pt.node,
    comp: _pt.elementType.isRequired,
    compGeneric: _pt.elementType,
    compAlias: _pt.elementType.isRequired,
    cls: _pt.elementType.isRequired,
    clsGeneric: _pt.elementType,
    clsAlias: _pt.elementType.isRequired,
    sfc: _pt.elementType.isRequired,
    sfcGeneric: _pt.elementType,
    sfcAlias: _pt.elementType.isRequired,
    el: _pt.element.isRequired,
    elAlias: _pt.element,
    sfcEl: _pt.element.isRequired,
    sfcElAlias: _pt.element,
    fcEl: _pt.element.isRequired,
    fcElAlias: _pt.element,
    jsx: _pt.element.isRequired,
    event: _pt.object.isRequired,
    eventAlias: _pt.object,
    ref: _pt.oneOfType([_pt.string, _pt.func, _pt.object]).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/type-unions.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Foo {
  foo: string;
}
export type Bar = {
  bar?: number;
};
enum Color {
  RED = 'Red',
  BLUE = 'Blue',
  GREEN = 'Green',
}
export interface Props {
  union: number | string | object;
  intersection?: number & string & object;
  combined: number & (string | object);
  strUnion?: 'foo' | 'bar' | 'baz';
  strIntersection: 'foo' & 'bar' & 'baz';
  numUnion: 1 | 2 | 3;
  numIntersection?: 1 & 2 & 3;
  anyUnion: any | number | string;
  typeRefUnion: Foo | Bar;
  typeRefIntersection?: Foo & Bar;
  enumUnion: Color.RED | Color.BLUE;
  enumIntersection: Color.BLUE & Color.GREEN;
  missingRefs?: InvalidReference | null;
}
export default class TypeUnionIntersection extends React.Component<Props> {
  static propTypes = {
    union: _pt.oneOfType([_pt.number, _pt.string, _pt.object]).isRequired,
    intersection: _pt.oneOfType([_pt.number, _pt.string, _pt.object]),
    combined: _pt.oneOfType([_pt.number, _pt.oneOfType([_pt.string, _pt.object])]).isRequired,
    strUnion: _pt.oneOf(['foo', 'bar', 'baz']),
    strIntersection: _pt.oneOf(['foo', 'bar', 'baz']).isRequired,
    numUnion: _pt.oneOf([1, 2, 3]).isRequired,
    numIntersection: _pt.oneOf([1, 2, 3]),
    anyUnion: _pt.any,
    typeRefUnion: _pt.oneOfType([_pt.shape({
      foo: _pt.string.isRequired
    }), _pt.shape({
      bar: _pt.number
    })]).isRequired,
    typeRefIntersection: _pt.oneOfType([_pt.shape({
      foo: _pt.string.isRequired
    }), _pt.shape({
      bar: _pt.number
    })]),
    enumUnion: _pt.oneOfType(['Red', 'Blue']).isRequired,
    enumIntersection: _pt.oneOfType(['Blue', 'Green']).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/types-after-component.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export default class TypesAfterComponent extends React.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}
export interface Props {
  name: string;
}"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/all-variations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const SFC = (props: Props) => null;

SFC.propTypes = {
  name: _pt.string.isRequired
};

const StatelessComponent = (props: Props) => null;

StatelessComponent.propTypes = {
  name: _pt.string.isRequired
};

const FC = (props: Props) => null;

FC.propTypes = {
  name: _pt.string.isRequired
};

const FunctionComponent = (props: Props) => null;

FunctionComponent.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}

const VarCustomReactImportName = (props: Props) => null;

VarCustomReactImportName.propTypes = {
  name: _pt.string.isRequired
};
export default VarCustomReactImportName;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarDefaultProps = (props: Props) => null;

VarDefaultProps.propTypes = {
  name: _pt.string
};
VarDefaultProps.defaultProps = {
  name: 'Foo'
};
export default VarDefaultProps;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/export-default.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarExportDefault = (props: Props) => null;

VarExportDefault.propTypes = {
  name: _pt.string.isRequired
};
export default VarExportDefault;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/export-named.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export const VarExportNamed = (props: Props) => null;
VarExportNamed.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}
export interface Props extends AProps, BProps {
  name: string;
}

const VarExtendedInterfaces = (props: Props) => null;

VarExtendedInterfaces.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default VarExtendedInterfaces;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export type BProps = {
  b: boolean;
};
export type Props = AProps & BProps & {
  name: string;
};

const VarExtendedTypeAliases = (props: Props) => null;

VarExtendedTypeAliases.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default VarExtendedTypeAliases;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}

const VarMergeWithExistingPropTypes = (props: Props) => null;

VarMergeWithExistingPropTypes.propTypes = {
  name: PropTypes.string.isRequired,
  custom: PropTypes.number.isRequired
};
export default VarMergeWithExistingPropTypes;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const CustomShape = PropTypes.string;

const VarMergeWithNoOverride = (props: Props) => null;

VarMergeWithNoOverride.propTypes = {
  name: CustomShape.isRequired
};
export default VarMergeWithNoOverride;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/missing-type.ts 1`] = `
"import React from 'react';

const VarMissingType = () => null;

export default VarMissingType;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/multiple-annotations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}

const VarMultipleAnnotations = (props: AProps & BProps) => null;

VarMultipleAnnotations.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired
};
export default VarMultipleAnnotations;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/no-annotations.ts 1`] = `
"import React from 'react';

const VarNoAnnotations = () => null;

export default VarNoAnnotations;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/no-export.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarNoExport = (props: Props) => null;

VarNoExport.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/no-react-import.ts 1`] = `
"interface Props {}

const VarNoReactImport = (props: Props) => null;

export default VarNoReactImport;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}

const VarNoTypeProperties = (props: Props) => null;

export default VarNoTypeProperties;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarStandard = (props: Props) => null;

VarStandard.propTypes = {
  name: _pt.string.isRequired
};
export default VarStandard;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/all-variations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const SFC: React.SFC<Props> = () => null;

SFC.propTypes = {
  name: _pt.string.isRequired
};

const StatelessComponent: React.StatelessComponent<Props> = () => null;

StatelessComponent.propTypes = {
  name: _pt.string.isRequired
};

const FC: React.FC<Props> = () => null;

FC.propTypes = {
  name: _pt.string.isRequired
};

const FunctionComponent: React.FunctionComponent<Props> = () => null;

FunctionComponent.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}

const VarCustomReactImportName: R.SFC<Props> = () => null;

VarCustomReactImportName.propTypes = {
  name: _pt.string.isRequired
};
export default VarCustomReactImportName;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarDefaultProps: React.SFC<Props> = () => null;

VarDefaultProps.propTypes = {
  name: _pt.string
};
VarDefaultProps.defaultProps = {
  name: 'Foo'
};
export default VarDefaultProps;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/export-default.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarExportDefault: React.SFC<Props> = () => null;

VarExportDefault.propTypes = {
  name: _pt.string.isRequired
};
export default VarExportDefault;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/export-named.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export const VarExportNamed: React.SFC<Props> = () => null;
VarExportNamed.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}
export interface Props extends AProps, BProps {
  name: string;
}

const VarExtendedInterfaces: React.SFC<Props> = () => null;

VarExtendedInterfaces.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default VarExtendedInterfaces;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export type BProps = {
  b: boolean;
};
export type Props = AProps & BProps & {
  name: string;
};

const VarExtendedTypeAliases: React.SFC<Props> = () => null;

VarExtendedTypeAliases.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default VarExtendedTypeAliases;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}

const VarMergeWithExistingPropTypes: React.SFC<Props> = () => null;

VarMergeWithExistingPropTypes.propTypes = {
  name: PropTypes.string.isRequired,
  custom: PropTypes.number.isRequired
};
export default VarMergeWithExistingPropTypes;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const CustomShape = PropTypes.string;

const VarMergeWithNoOverride: React.SFC<Props> = () => null;

VarMergeWithNoOverride.propTypes = {
  name: CustomShape.isRequired
};
export default VarMergeWithNoOverride;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/missing-type.ts 1`] = `
"import React from 'react';

const VarMissingType: React.SFC<Props> = () => null;

export default VarMissingType;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/multiple-annotations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}

const VarMultipleAnnotations: React.SFC<AProps & BProps> = () => null;

VarMultipleAnnotations.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired
};
export default VarMultipleAnnotations;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/no-annotations.ts 1`] = `
"import React from 'react';

const VarNoAnnotations: React.SFC = () => null;

export default VarNoAnnotations;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/no-export.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarNoExport: React.SFC<Props> = () => null;

VarNoExport.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/no-react-import.ts 1`] = `
"interface Props {}

const VarNoReactImport: React.SFC<Props> = () => null;

export default VarNoReactImport;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}

const VarNoTypeProperties: React.SFC<Props> = () => null;

export default VarNoTypeProperties;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-explicit/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarStandard: React.SFC<Props> = () => null;

VarStandard.propTypes = {
  name: _pt.string.isRequired
};
export default VarStandard;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/all-variations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const SFC = function (props: Props) {
  return null;
};

SFC.propTypes = {
  name: _pt.string.isRequired
};

const StatelessComponent = function (props: Props) {
  return null;
};

StatelessComponent.propTypes = {
  name: _pt.string.isRequired
};

const FC = function (props: Props) {
  return null;
};

FC.propTypes = {
  name: _pt.string.isRequired
};

const FunctionComponent = function (props: Props) {
  return null;
};

FunctionComponent.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}

const VarCustomReactImportName = function (props: Props) {
  return null;
};

VarCustomReactImportName.propTypes = {
  name: _pt.string.isRequired
};
export default VarCustomReactImportName;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarDefaultProps = function (props: Props) {
  return null;
};

VarDefaultProps.propTypes = {
  name: _pt.string
};
VarDefaultProps.defaultProps = {
  name: 'Foo'
};
export default VarDefaultProps;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/export-default.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarExportDefault = function (props: Props) {
  return null;
};

VarExportDefault.propTypes = {
  name: _pt.string.isRequired
};
export default VarExportDefault;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/export-named.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export const VarExportNamed = function (props: Props) {
  return null;
};
VarExportNamed.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}
export interface Props extends AProps, BProps {
  name: string;
}

const VarExtendedInterfaces = function (props: Props) {
  return null;
};

VarExtendedInterfaces.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default VarExtendedInterfaces;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export type BProps = {
  b: boolean;
};
export type Props = AProps & BProps & {
  name: string;
};

const VarExtendedTypeAliases = function (props: Props) {
  return null;
};

VarExtendedTypeAliases.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default VarExtendedTypeAliases;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}

const VarMergeWithExistingPropTypes = function (props: Props) {
  return null;
};

VarMergeWithExistingPropTypes.propTypes = {
  name: PropTypes.string.isRequired,
  custom: PropTypes.number.isRequired
};
export default VarMergeWithExistingPropTypes;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const CustomShape = PropTypes.string;

const VarMergeWithNoOverride = function (props: Props) {
  return null;
};

VarMergeWithNoOverride.propTypes = {
  name: CustomShape.isRequired
};
export default VarMergeWithNoOverride;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/missing-type.ts 1`] = `
"import React from 'react';

const VarMissingType = function () {
  return null;
};

export default VarMissingType;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/multiple-annotations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export interface BProps {
  b: boolean;
}

const VarMultipleAnnotations = function (props: AProps & BProps) {
  return null;
};

VarMultipleAnnotations.propTypes = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired
};
export default VarMultipleAnnotations;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/no-annotations.ts 1`] = `
"import React from 'react';

const VarNoAnnotations = function () {
  return null;
};

export default VarNoAnnotations;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/no-export.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarNoExport = function (props: Props) {
  return null;
};

VarNoExport.propTypes = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/no-react-import.ts 1`] = `
"interface Props {}

const VarNoReactImport = function (props: Props) {
  return null;
};

export default VarNoReactImport;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}

const VarNoTypeProperties = function (props: Props) {
  return null;
};

export default VarNoTypeProperties;"
`;

exports[`babel-plugin-typescript-to-proptypes transforms ./fixtures/var-no-arrow/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}

const VarStandard = function (props: Props) {
  return null;
};

VarStandard.propTypes = {
  name: _pt.string.isRequired
};
export default VarStandard;"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when file is JSX/TSX 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export default class JSX extends React.Component {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return <div />;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling down to ES3 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports['default'] = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\"object\\" || typeof call === \\"function\\")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\"this hasn't been initialised - super() hasn't been called\\"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ESTarget = function (_React$Component) {
  _inherits(ESTarget, _React$Component);

  function ESTarget() {
    _classCallCheck(this, ESTarget);

    return _possibleConstructorReturn(this, _getPrototypeOf(ESTarget).apply(this, arguments));
  }

  _createClass(ESTarget, [{
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return ESTarget;
}(_react['default'].Component);

exports['default'] = ESTarget;

_defineProperty(ESTarget, 'propTypes', {
  name: _propTypes['default'].string.isRequired
});"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling down to ES3 2`] = `
"\\"use strict\\";

exports.__esModule = true;
exports['default'] = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ESTarget = function (_React$Component) {
  _inheritsLoose(ESTarget, _React$Component);

  function ESTarget() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = ESTarget.prototype;

  _proto.render = function render() {
    return null;
  };

  return ESTarget;
}(_react['default'].Component);

exports['default'] = ESTarget;

_defineProperty(ESTarget, 'propTypes', {
  name: _propTypes['default'].string.isRequired
});"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling down to ES5 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\"object\\" || typeof call === \\"function\\")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\"this hasn't been initialised - super() hasn't been called\\"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ESTarget = function (_React$Component) {
  _inherits(ESTarget, _React$Component);

  function ESTarget() {
    _classCallCheck(this, ESTarget);

    return _possibleConstructorReturn(this, _getPrototypeOf(ESTarget).apply(this, arguments));
  }

  _createClass(ESTarget, [{
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return ESTarget;
}(_react.default.Component);

exports.default = ESTarget;

_defineProperty(ESTarget, 'propTypes', {
  name: _propTypes.default.string.isRequired
});"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling down to ES5 2`] = `
"\\"use strict\\";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ESTarget = function (_React$Component) {
  _inheritsLoose(ESTarget, _React$Component);

  function ESTarget() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = ESTarget.prototype;

  _proto.render = function render() {
    return null;
  };

  return ESTarget;
}(_react.default.Component);

exports.default = ESTarget;

_defineProperty(ESTarget, 'propTypes', {
  name: _propTypes.default.string.isRequired
});"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling down to ES6 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

interface Props {
  name: string;
}

class ESTarget extends _react.default.Component<Props> {
  static propTypes = {
    name: _propTypes.default.string.isRequired
  };

  render() {
    return null;
  }

}

exports.default = ESTarget;"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling down to ES6 2`] = `
"\\"use strict\\";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

interface Props {
  name: string;
}

class ESTarget extends _react.default.Component<Props> {
  static propTypes = {
    name: _propTypes.default.string.isRequired
  };

  render() {
    return null;
  }

}

exports.default = ESTarget;"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling to CJS modules 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

interface Props {
  name: string;
}

class ESTarget extends _react.default.Component<Props> {
  static propTypes = {
    name: _propTypes.default.string.isRequired
  };

  render() {
    return null;
  }

}

exports.default = ESTarget;"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling to CJS modules 2`] = `
"\\"use strict\\";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

interface Props {
  name: string;
}

class ESTarget extends _react.default.Component<Props> {
  static propTypes = {
    name: _propTypes.default.string.isRequired
  };

  render() {
    return null;
  }

}

exports.default = ESTarget;"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling to ESM modules 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default class ESTarget extends React.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when transpiling to ESM modules 2`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default class ESTarget extends React.Component<Props> {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when using ALL the things 1`] = `
"\\"use strict\\";

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

class TSPreset extends _react.default.Component {
  static propTypes = {
    name: _propTypes.default.string.isRequired
  };

  render() {
    return null;
  }

}

exports.default = TSPreset;"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when using ALL the things 2`] = `
"\\"use strict\\";

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

class TSPreset extends _react.default.Component {
  static propTypes = {
    name: _propTypes.default.string.isRequired
  };

  render() {
    return null;
  }

}

exports.default = TSPreset;"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when using the transform runtime 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export default class TSPreset extends React.Component {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`babel-plugin-typescript-to-proptypes works correctly when using the typescript preset 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export default class TSPreset extends React.Component {
  static propTypes = {
    name: _pt.string.isRequired
  };

  render() {
    return null;
  }

}"
`;
